"use strict";(self.webpackChunkcode_note_blog=self.webpackChunkcode_note_blog||[]).push([[6837],{73547:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var s=t(11527),r=t(88672);const i={},c="\u4e00\u3001Nacos\u670d\u52a1\u53d1\u73b0\u6d41\u7a0b\u56fe",a={id:"Spring\u5168\u5bb6\u6876/SpringCloudAlibaba\u6e90\u7801\u5206\u6790/SpringCloudAlibabaNacos\u6e90\u7801\u5206\u6790\uff1a\u670d\u52a1\u53d1\u73b0",title:"\u4e00\u3001Nacos\u670d\u52a1\u53d1\u73b0\u6d41\u7a0b\u56fe",description:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0",source:"@site/docs/Spring\u5168\u5bb6\u6876/SpringCloudAlibaba\u6e90\u7801\u5206\u6790/SpringCloudAlibabaNacos\u6e90\u7801\u5206\u6790\uff1a\u670d\u52a1\u53d1\u73b0.md",sourceDirName:"Spring\u5168\u5bb6\u6876/SpringCloudAlibaba\u6e90\u7801\u5206\u6790",slug:"/Spring\u5168\u5bb6\u6876/SpringCloudAlibaba\u6e90\u7801\u5206\u6790/SpringCloudAlibabaNacos\u6e90\u7801\u5206\u6790\uff1a\u670d\u52a1\u53d1\u73b0",permalink:"/code-note-blog/docs/Spring\u5168\u5bb6\u6876/SpringCloudAlibaba\u6e90\u7801\u5206\u6790/SpringCloudAlibabaNacos\u6e90\u7801\u5206\u6790\uff1a\u670d\u52a1\u53d1\u73b0",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Spring\u5168\u5bb6\u6876/SpringCloudAlibaba\u6e90\u7801\u5206\u6790/SpringCloudAlibabaNacos\u6e90\u7801\u5206\u6790\uff1a\u670d\u52a1\u53d1\u73b0.md",tags:[],version:"current",frontMatter:{},sidebar:"spring",previous:{title:"1\\. SkyWalking \u7b80\u4ecb",permalink:"/code-note-blog/docs/Spring\u5168\u5bb6\u6876/SpringCloudAlibaba/SpringCloudAlibabaSkywalking"},next:{title:"\u4e00\u3001 Nacos\u670d\u52a1\u6ce8\u518c\u6e90\u7801\u89e3\u6790",permalink:"/code-note-blog/docs/Spring\u5168\u5bb6\u6876/SpringCloudAlibaba\u6e90\u7801\u5206\u6790/SpringCloudAlibabaNacos\u6e90\u7801\u5206\u6790\uff1a\u670d\u52a1\u6ce8\u518c"}},l={},o=[{value:"1\uff09\u5148\u4ece\u672c\u5730\u7f13\u5b58serviceInfoMap\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff0c\u83b7\u53d6\u4e0d\u5230\u5219\u901a\u8fc7<code>NamingProxy</code>\u8c03\u7528Nacos \u670d\u52a1\u7aef\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff1b\u6700\u540e\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\u6bcf\u79d2\u8bf7\u6c42\u670d\u52a1\u7aef \u83b7\u53d6\u5b9e\u4f8b\u4fe1\u606f\u5217\u8868\u8fdb\u800c\u66f4\u65b0\u672c\u5730\u7f13\u5b58serviceInfoMap\uff1b",id:"1\u5148\u4ece\u672c\u5730\u7f13\u5b58serviceinfomap\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u83b7\u53d6\u4e0d\u5230\u5219\u901a\u8fc7namingproxy\u8c03\u7528nacos-\u670d\u52a1\u7aef\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u6700\u540e\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\u6bcf\u79d2\u8bf7\u6c42\u670d\u52a1\u7aef-\u83b7\u53d6\u5b9e\u4f8b\u4fe1\u606f\u5217\u8868\u8fdb\u800c\u66f4\u65b0\u672c\u5730\u7f13\u5b58serviceinfomap",level:4},{value:"2\uff09\u5728HostReactor\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u5b9e\u4f8b\u5316PushReceiver\uff0c\u8fdb\u800c\u5f00\u542f\u4e00\u4e2a\u7ebf\u7a0b\u6b7b\u5faa\u73af\u901a\u8fc7<code>DatagramSocket#receive()</code>\u76d1\u542cNacos\u670d\u52a1\u7aef\u4e2d\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u53d1\u751f\u53d8\u66f4\u540e\u7684UDP\u901a\u77e5\u3002",id:"2\u5728hostreactor\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u5b9e\u4f8b\u5316pushreceiver\u8fdb\u800c\u5f00\u542f\u4e00\u4e2a\u7ebf\u7a0b\u6b7b\u5faa\u73af\u901a\u8fc7datagramsocketreceive\u76d1\u542cnacos\u670d\u52a1\u7aef\u4e2d\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u53d1\u751f\u53d8\u66f4\u540e\u7684udp\u901a\u77e5",level:4},{value:"1\uff09\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u5217\u8868",id:"1\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u5217\u8868",level:4},{value:"2\uff09\u91c7\u7528UDP\u65b9\u5f0f\u505a\u670d\u52a1\u5b9e\u4f8b\u63a8\u9001",id:"2\u91c7\u7528udp\u65b9\u5f0f\u505a\u670d\u52a1\u5b9e\u4f8b\u63a8\u9001",level:4}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h4:"h4",img:"img",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"\u4e00nacos\u670d\u52a1\u53d1\u73b0\u6d41\u7a0b\u56fe",children:"\u4e00\u3001Nacos\u670d\u52a1\u53d1\u73b0\u6d41\u7a0b\u56fe"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://java-tutorial.oss-cn-shanghai.aliyuncs.com/b5b4ef0330dc4882b0fc2f73994face7.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0",title:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})}),"\n",(0,s.jsxs)(n.p,{children:["\u5efa\u8bae\u5927\u5bb6\u81ea\u5df1\u68b3\u7406\u4e00\u4e0b\u6d41\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\uff1a",(0,s.jsx)(n.a,{href:"https://blog.csdn.net/Saintmm/article/details/121981184",children:"Nacos\u670d\u52a1\u6ce8\u518c\u6e90\u7801\u5206\u6790\u6d41\u7a0b\u56fe"})]}),"\n",(0,s.jsx)(n.h1,{id:"\u4e8c\u627e\u6e90\u7801\u5165\u53e3",children:"\u4e8c\u3001\u627e\u6e90\u7801\u5165\u53e3"}),"\n",(0,s.jsxs)(n.p,{children:["spring-cloud-commons\u5305\u4e2d\u5b9a\u4e49\u4e86\u4e00\u5957\u670d\u52a1\u53d1\u73b0\u7684\u89c4\u8303\uff0c\u6838\u5fc3\u903b\u8f91\u5728",(0,s.jsx)(n.code,{children:"DiscoveryClient"}),"\u63a5\u53e3\u4e2d\uff1b\n",(0,s.jsx)(n.img,{src:"https://java-tutorial.oss-cn-shanghai.aliyuncs.com/75ebfd400023456faaafd95e7d9cdbf7.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0",title:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"}),"\n\u96c6\u6210Spring Cloud\u5b9e\u73b0\u670d\u52a1\u53d1\u73b0\u7684\u7ec4\u4ef6\u90fd\u4f1a\u5b9e\u73b0",(0,s.jsx)(n.code,{children:"DiscoveryClient"}),"\u63a5\u53e3\uff1bnacos-discovery\u5305\u4e0b\u7684",(0,s.jsx)(n.code,{children:"NacosDiscoveryClient"}),"\u7c7b\u5b9e\u73b0",(0,s.jsx)(n.code,{children:"DiscoveryClient"}),"\u63a5\u53e3\u3002\n",(0,s.jsx)(n.img,{src:"https://java-tutorial.oss-cn-shanghai.aliyuncs.com/0c330a7ce5c744c4a2b25dc024b2430f.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0",title:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})]}),"\n",(0,s.jsx)(n.h1,{id:"\u4e09\u5ba2\u6237\u7aef\u670d\u52a1\u53d1\u73b0",children:"\u4e09\u3001\u5ba2\u6237\u7aef\u670d\u52a1\u53d1\u73b0"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["1\u3001\u5f53nacos\u5ba2\u6237\u7aef\u8fd0?\u8d77\u6765\u4e4b\u540e\uff0c\u5b83\u53ea\u662f\u53bb\u505a\u670d\u52a1\u6ce8\u518c\u3001\u914d\u7f6e\u83b7\u53d6\u7b49\u64cd\u4f5c\uff1b\u5e76\u4e0d\u4f1a\u7acb\u5373\u53bb\u8bf7\u6c42\u670d\u52a1\u4fe1\u606f\uff1b\n2\u3001\u5f53\u7b2c\u4e00\u6b21\u8bf7\u6c42\u65f6\u5019\uff0c\u624d\u4f1a\u53bb\u83b7\u53d6\u670d\u52a1\uff0c\u5373",(0,s.jsx)(n.code,{children:"\u61d2\u52a0\u8f7d\u673a\u5236"}),"\uff1b"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"1\u5148\u4ece\u672c\u5730\u7f13\u5b58serviceinfomap\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u83b7\u53d6\u4e0d\u5230\u5219\u901a\u8fc7namingproxy\u8c03\u7528nacos-\u670d\u52a1\u7aef\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u6700\u540e\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\u6bcf\u79d2\u8bf7\u6c42\u670d\u52a1\u7aef-\u83b7\u53d6\u5b9e\u4f8b\u4fe1\u606f\u5217\u8868\u8fdb\u800c\u66f4\u65b0\u672c\u5730\u7f13\u5b58serviceinfomap",children:["1\uff09\u5148\u4ece\u672c\u5730\u7f13\u5b58serviceInfoMap\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff0c\u83b7\u53d6\u4e0d\u5230\u5219\u901a\u8fc7",(0,s.jsx)(n.code,{children:"NamingProxy"}),"\u8c03\u7528Nacos \u670d\u52a1\u7aef\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff1b\u6700\u540e\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\u6bcf\u79d2\u8bf7\u6c42\u670d\u52a1\u7aef \u83b7\u53d6\u5b9e\u4f8b\u4fe1\u606f\u5217\u8868\u8fdb\u800c\u66f4\u65b0\u672c\u5730\u7f13\u5b58serviceInfoMap\uff1b"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// NacosDiscoveryClient#getInstances()\npublic List<ServiceInstance> getInstances(String serviceId) {\n    try {\n        // \u901a\u8fc7NacosNamingService\u83b7\u53d6\u670d\u52a1\u5bf9\u5e94\u7684\u5b9e\u4f8b\u4fe1\u606f\uff1b\u70b9\u8fdb\u53bb\n        List<Instance> instances = discoveryProperties.namingServiceInstance()\n                .selectInstances(serviceId, true);\n        return hostToServiceInstanceList(instances, serviceId);\n    } catch (Exception e) {\n        throw new RuntimeException(\n                "Can not get hosts from nacos server. serviceId: " + serviceId, e);\n    }\n}\n\n// NacosNamingService#selectInstances()\npublic List<Instance> selectInstances(String serviceName, boolean healthy) throws NacosException {\n    return selectInstances(serviceName, new ArrayList<String>(), healthy);\n}\npublic List<Instance> selectInstances(String serviceName, List<String> clusters, boolean healthy)\n    throws NacosException {\n    // \u9ed8\u8ba4\u8d70\u8ba2\u9605\u6a21\u5f0f\n    return selectInstances(serviceName, clusters, healthy, true);\n}\npublic List<Instance> selectInstances(String serviceName, List<String> clusters, boolean healthy,\n                                      boolean subscribe) throws NacosException {\n    // \u9ed8\u8ba4\u67e5\u8be2DEFAULT_GROUP\u4e0b\u7684\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\n    return selectInstances(serviceName, Constants.DEFAULT_GROUP, clusters, healthy, subscribe);\n}\npublic List<Instance> selectInstances(String serviceName, String groupName, List<String> clusters, boolean healthy, boolean subscribe) throws NacosException {\n\n    ServiceInfo serviceInfo;\n    // \u9ed8\u8ba4\u8d70\u8ba2\u9605\u6a21\u5f0f\uff0c\u5373subscribe\u4e3aTRUE\n    if (subscribe) {\n        serviceInfo = hostReactor.getServiceInfo(NamingUtils.getGroupedName(serviceName, groupName), StringUtils.join(clusters, ","));\n    } else {\n        serviceInfo = hostReactor.getServiceInfoDirectlyFromServer(NamingUtils.getGroupedName(serviceName, groupName), StringUtils.join(clusters, ","));\n    }\n    return selectInstances(serviceInfo, healthy);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"HostReactor#getServiceInfo()"}),"\u65b9\u6cd5\u662f\u771f\u6b63\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u7684\u5730\u65b9\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public ServiceInfo getServiceInfo(final String serviceName, final String clusters) {\n\n    NAMING_LOGGER.debug("failover-mode: " + failoverReactor.isFailoverSwitch());\n    String key = ServiceInfo.getKey(serviceName, clusters);\n    if (failoverReactor.isFailoverSwitch()) {\n        return failoverReactor.getService(key);\n    }\n\n    // 1\u3001\u4ece\u672c\u5730\u7f13\u5b58serviceInfoMap\u4e2d\u83b7\u53d6\u5b9e\u4f8b\u4fe1\u606f\n    ServiceInfo serviceObj = getServiceInfo0(serviceName, clusters);\n\n    // 2\u3001\u5982\u679c\u672c\u5730\u7f13\u5b58\u4e2d\u6ca1\u6709\uff0c\u5219\u8d70HTTP\u8c03\u7528\u4eceNacos\u670d\u52a1\u7aef\u83b7\u53d6\n    if (null == serviceObj) {\n        serviceObj = new ServiceInfo(serviceName, clusters);\n\n        serviceInfoMap.put(serviceObj.getKey(), serviceObj);\n\n        updatingMap.put(serviceName, new Object());\n        updateServiceNow(serviceName, clusters);\n        updatingMap.remove(serviceName);\n\n    } else if (updatingMap.containsKey(serviceName)) {\n\n        if (UPDATE_HOLD_INTERVAL > 0) {\n            // hold a moment waiting for update finish\n            synchronized (serviceObj) {\n                try {\n                    serviceObj.wait(UPDATE_HOLD_INTERVAL);\n                } catch (InterruptedException e) {\n                    NAMING_LOGGER.error("[getServiceInfo] serviceName:" + serviceName + ", clusters:" + clusters, e);\n                }\n            }\n        }\n    }\n\n    // 3\u3001\u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff0c\u6bcf\u9694\u4e00\u79d2\u4eceNacos\u670d\u52a1\u7aef\u83b7\u53d6\u6700\u65b0\u7684\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff0c\u66f4\u65b0\u5230\u672c\u5730\u7f13\u5b58seriveInfoMap\u4e2d\n    scheduleUpdateIfAbsent(serviceName, clusters);\n\n    // 4\u3001 \u4ece\u672c\u5730\u7f13\u5b58serviceInfoMap\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\n    return serviceInfoMap.get(serviceObj.getKey());\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"1\u3001\u4ece\u672c\u5730\u7f13\u5b58\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"private ServiceInfo getServiceInfo0(String serviceName, String clusters) {\n\n    String key = ServiceInfo.getKey(serviceName, clusters);\n\n    return serviceInfoMap.get(key);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"2\u3001\u5219\u8d70HTTP\u8c03\u7528\u4eceNacos\u670d\u52a1\u7aef\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public void updateServiceNow(String serviceName, String clusters) {\n    ServiceInfo oldService = getServiceInfo0(serviceName, clusters);\n    try {\n\n        // \u901a\u8fc7NamingProxy\u8d70HTTP\u63a5\u53e3\u8c03\u7528\uff0c\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\n        String result = serverProxy.queryList(serviceName, clusters, pushReceiver.getUDPPort(), false);\n        if (StringUtils.isNotEmpty(result)) {\n            // \u66f4\u65b0\u672c\u5730\u7f13\u5b58serviceInfoMap\n            processServiceJSON(result);\n        }\n    } catch (Exception e) {\n        NAMING_LOGGER.error("[NA] failed to update serviceName: " + serviceName, e);\n    } finally {\n        if (oldService != null) {\n            synchronized (oldService) {\n                oldService.notifyAll();\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"3\u3001\u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff0c\u6bcf\u9694\u4e00\u79d2\u4eceNacos\u670d\u52a1\u7aef\u83b7\u53d6\u6700\u65b0\u7684\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff0c\u66f4\u65b0\u5230\u672c\u5730\u7f13\u5b58seriveInfoMap\u4e2d\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public void scheduleUpdateIfAbsent(String serviceName, String clusters) {\n    if (futureMap.get(ServiceInfo.getKey(serviceName, clusters)) != null) {\n        return;\n    }\n\n    synchronized (futureMap) {\n        if (futureMap.get(ServiceInfo.getKey(serviceName, clusters)) != null) {\n            return;\n        }\n\n        // \u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\n        ScheduledFuture<?> future = addTask(new UpdateTask(serviceName, clusters));\n        futureMap.put(ServiceInfo.getKey(serviceName, clusters), future);\n    }\n}\n\n// \u5b9a\u65f6\u4efb\u52a1\u6267\u884c\u903b\u8f91\uff0cUpdateTask#run()\npublic void run() {\n    try {\n        ServiceInfo serviceObj = serviceInfoMap.get(ServiceInfo.getKey(serviceName, clusters));\n\n        if (serviceObj == null) {\n            updateServiceNow(serviceName, clusters);\n            executor.schedule(this, DEFAULT_DELAY, TimeUnit.MILLISECONDS);\n            return;\n        }\n\n        if (serviceObj.getLastRefTime() <= lastRefTime) {\n            updateServiceNow(serviceName, clusters);\n            serviceObj = serviceInfoMap.get(ServiceInfo.getKey(serviceName, clusters));\n        } else {\n            // if serviceName already updated by push, we should not override it\n            // since the push data may be different from pull through force push\n            refreshOnly(serviceName, clusters);\n        }\n\n        // \u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff0c1s\u4e4b\u540e\u6267\u884c\n        executor.schedule(this, serviceObj.getCacheMillis(), TimeUnit.MILLISECONDS);\n\n        lastRefTime = serviceObj.getLastRefTime();\n    } catch (Throwable e) {\n        NAMING_LOGGER.warn("[NA] failed to update serviceName: " + serviceName, e);\n    }\n\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u67e5\u8be2\u670d\u52a1\u5b9e\u4f8b\u5217\u8868\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public String queryList(String serviceName, String clusters, int udpPort, boolean healthyOnly)\n    throws NacosException {\n\n    final Map<String, String> params = new HashMap<String, String>(8);\n    params.put(CommonParams.NAMESPACE_ID, namespaceId);\n    params.put(CommonParams.SERVICE_NAME, serviceName);\n    params.put("clusters", clusters);\n    params.put("udpPort", String.valueOf(udpPort));\n    params.put("clientIP", NetUtils.localIP());\n    params.put("healthyOnly", String.valueOf(healthyOnly));\n\n    return reqAPI(UtilAndComs.NACOS_URL_BASE + "/instance/list", params, HttpMethod.GET);\n}\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"2\u5728hostreactor\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u5b9e\u4f8b\u5316pushreceiver\u8fdb\u800c\u5f00\u542f\u4e00\u4e2a\u7ebf\u7a0b\u6b7b\u5faa\u73af\u901a\u8fc7datagramsocketreceive\u76d1\u542cnacos\u670d\u52a1\u7aef\u4e2d\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u53d1\u751f\u53d8\u66f4\u540e\u7684udp\u901a\u77e5",children:["2\uff09\u5728HostReactor\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u5b9e\u4f8b\u5316PushReceiver\uff0c\u8fdb\u800c\u5f00\u542f\u4e00\u4e2a\u7ebf\u7a0b\u6b7b\u5faa\u73af\u901a\u8fc7",(0,s.jsx)(n.code,{children:"DatagramSocket#receive()"}),"\u76d1\u542cNacos\u670d\u52a1\u7aef\u4e2d\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u53d1\u751f\u53d8\u66f4\u540e\u7684UDP\u901a\u77e5\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public class PushReceiver implements Runnable {\n    private DatagramSocket udpSocket;\n\n    public PushReceiver(HostReactor hostReactor) {\n        try {\n            this.hostReactor = hostReactor;\n            udpSocket = new DatagramSocket();\n            // \u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\n            executorService = new ScheduledThreadPoolExecutor(1, new ThreadFactory() {\n                @Override\n                public Thread newThread(Runnable r) {\n                    Thread thread = new Thread(r);\n                    thread.setDaemon(true);\n                    thread.setName("com.alibaba.nacos.naming.push.receiver");\n                    return thread;\n                }\n            });\n\n            executorService.execute(this);\n        } catch (Exception e) {\n            NAMING_LOGGER.error("[NA] init udp socket failed", e);\n        }\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                // byte[] is initialized with 0 full filled by default\n                byte[] buffer = new byte[UDP_MSS];\n                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n\n                // \u76d1\u542cNacos\u670d\u52a1\u7aef\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u53d8\u66f4\u540e\u7684\u901a\u77e5\n                udpSocket.receive(packet);\n\n                String json = new String(IoUtils.tryDecompress(packet.getData()), "UTF-8").trim();\n                NAMING_LOGGER.info("received push data: " + json + " from " + packet.getAddress().toString());\n\n                PushPacket pushPacket = JSON.parseObject(json, PushPacket.class);\n                String ack;\n                if ("dom".equals(pushPacket.type) || "service".equals(pushPacket.type)) {\n                    hostReactor.processServiceJSON(pushPacket.data);\n\n                    // send ack to server\n                    ack = "{\\"type\\": \\"push-ack\\""\n                        + ", \\"lastRefTime\\":\\"" + pushPacket.lastRefTime\n                        + "\\", \\"data\\":" + "\\"\\"}";\n                } else if ("dump".equals(pushPacket.type)) {\n                    // dump data to server\n                    ack = "{\\"type\\": \\"dump-ack\\""\n                        + ", \\"lastRefTime\\": \\"" + pushPacket.lastRefTime\n                        + "\\", \\"data\\":" + "\\""\n                        + StringUtils.escapeJavaScript(JSON.toJSONString(hostReactor.getServiceInfoMap()))\n                        + "\\"}";\n                } else {\n                    // do nothing send ack only\n                    ack = "{\\"type\\": \\"unknown-ack\\""\n                        + ", \\"lastRefTime\\":\\"" + pushPacket.lastRefTime\n                        + "\\", \\"data\\":" + "\\"\\"}";\n                }\n\n                udpSocket.send(new DatagramPacket(ack.getBytes(Charset.forName("UTF-8")),\n                    ack.getBytes(Charset.forName("UTF-8")).length, packet.getSocketAddress()));\n            } catch (Exception e) {\n                NAMING_LOGGER.error("[NA] error while receiving push data", e);\n            }\n        }\n    }\n\n}\n'})}),"\n",(0,s.jsx)(n.h1,{id:"\u56db\u670d\u52a1\u7aef\u670d\u52a1\u53d1\u73b0",children:"\u56db\u3001\u670d\u52a1\u7aef\u670d\u52a1\u53d1\u73b0"}),"\n",(0,s.jsx)(n.p,{children:"Nacos\u670d\u52a1\u7aef\u7684\u670d\u52a1\u53d1\u73b0\u4e3b\u8981\u505a\u4e24\u4ef6\u4e8b\uff1a"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["1\u3001\u67e5\u8be2\u670d\u52a1\u5b9e\u4f8b\u5217\u8868\uff1b\u5148\u4ece\u7f13\u5b58serviceMap\u4e2d\u627e\u5230service\u5bf9\u5e94\u7684Cluster\uff0c\u518d\u4eceCluster\u7684\u4e24\u4e2aSet\uff1a",(0,s.jsx)(n.code,{children:"persistentInstances"}),"\u3001",(0,s.jsx)(n.code,{children:"ephemeralInstances"}),"\u83b7\u53d6\u5168\u91cf\u7684\u5b9e\u4f8b\u4fe1\u606f\uff1b\n2\u3001\u5c06\u5ba2\u6237\u7aef\u4f20\u6765\u7684ip\u3001udp\u7aef\u53e3\u53f7\u52a0\u6dfb\u52a0\u5230",(0,s.jsx)(n.code,{children:"clientMap"}),"\uff0c\u8fdb\u800c\u505a\u670d\u52a1\u63a8\u9001\uff1bclientMap\u5c5e\u4e8e",(0,s.jsx)(n.code,{children:"NamingSubscriberService"}),"\u7684\u5b9e\u73b0\u7c7b",(0,s.jsx)(n.code,{children:"NamingSubscriberServiceV1Impl"}),"\uff0c\u5176key\u662fservice name\uff0cvalue\u662f\u8ba2\u9605\u4e86\u8be5\u670d\u52a1\u7684\u5ba2\u6237\u7aef\u5217\u8868(ip+\u7aef\u53e3\u53f7)\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u89c1naming\u9879\u76ee\u4e0b\u7684 InstanceController\u7c7b\u7684list()\u65b9\u6cd5\uff1a"}),"\n",(0,s.jsx)(n.h4,{id:"1\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u5217\u8868",children:"1\uff09\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u5217\u8868"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@GetMapping("/list")\n@Secured(parser = NamingResourceParser.class, action = ActionTypes.READ)\npublic Object list(HttpServletRequest request) throws Exception {\n\n    String namespaceId = WebUtils.optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);\n    String serviceName = WebUtils.required(request, CommonParams.SERVICE_NAME);\n    NamingUtils.checkServiceNameFormat(serviceName);\n\n    String agent = WebUtils.getUserAgent(request);\n    String clusters = WebUtils.optional(request, "clusters", StringUtils.EMPTY);\n    String clientIP = WebUtils.optional(request, "clientIP", StringUtils.EMPTY);\n    int udpPort = Integer.parseInt(WebUtils.optional(request, "udpPort", "0"));\n    boolean healthyOnly = Boolean.parseBoolean(WebUtils.optional(request, "healthyOnly", "false"));\n\n    boolean isCheck = Boolean.parseBoolean(WebUtils.optional(request, "isCheck", "false"));\n\n    String app = WebUtils.optional(request, "app", StringUtils.EMPTY);\n    String env = WebUtils.optional(request, "env", StringUtils.EMPTY);\n    String tenant = WebUtils.optional(request, "tid", StringUtils.EMPTY);\n\n    Subscriber subscriber = new Subscriber(clientIP + ":" + udpPort, agent, app, clientIP, namespaceId, serviceName,\n            udpPort, clusters);\n    // \u8fdb\u53bbInstanceOperatorServiceImpl#listInstance()\u65b9\u6cd5\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u5217\u8868\n    return getInstanceOperator().listInstance(namespaceId, serviceName, subscriber, clusters, healthyOnly);\n}\n\n//InstanceOperatorServiceImpl#listInstance()\npublic ServiceInfo listInstance(String namespaceId, String serviceName, Subscriber subscriber, String cluster,\n            boolean healthOnly) throws Exception {\n        ClientInfo clientInfo = new ClientInfo(subscriber.getAgent());\n        String clientIP = subscriber.getIp();\n        ServiceInfo result = new ServiceInfo(serviceName, cluster);\n        Service service = serviceManager.getService(namespaceId, serviceName);\n        long cacheMillis = switchDomain.getDefaultCacheMillis();\n\n        // now try to enable the push\n        try {\n            // \u5c1d\u8bd5\u542f\u7528\u63a8\u9001\u670d\u52a1UdpPushService\uff0c\u5373\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u53d1\u751f\u53d8\u66f4\u65f6\u901a\u8fc7UDP\u7684\u65b9\u5f0f\u901a\u77e5Nacos Client\n            if (subscriber.getPort() > 0 && pushService.canEnablePush(subscriber.getAgent())) {\n                subscriberServiceV1.addClient(namespaceId, serviceName, cluster, subscriber.getAgent(),\n                        new InetSocketAddress(clientIP, subscriber.getPort()), pushDataSource, StringUtils.EMPTY,\n                        StringUtils.EMPTY);\n                cacheMillis = switchDomain.getPushCacheMillis(serviceName);\n            }\n        } catch (Exception e) {\n            Loggers.SRV_LOG.error("[NACOS-API] failed to added push client {}, {}:{}", clientInfo, clientIP,\n                    subscriber.getPort(), e);\n            cacheMillis = switchDomain.getDefaultCacheMillis();\n        }\n\n        if (service == null) {\n            if (Loggers.SRV_LOG.isDebugEnabled()) {\n                Loggers.SRV_LOG.debug("no instance to serve for service: {}", serviceName);\n            }\n            result.setCacheMillis(cacheMillis);\n            return result;\n        }\n\n        // \u68c0\u67e5\u670d\u52a1\u662f\u5426\u7981\u7528\n        checkIfDisabled(service);\n\n        // \u8fd9\u91cc\u662f\u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f\u7684\u5173\u952e\u4ee3\u7801\uff0c\u83b7\u53d6\u6240\u6709\u6c38\u4e45\u548c\u4e34\u65f6\u670d\u52a1\u5b9e\u4f8b\n        List<com.alibaba.nacos.naming.core.Instance> srvedIps = service\n                .srvIPs(Arrays.asList(StringUtils.split(cluster, StringUtils.COMMA)));\n\n        // filter ips using selector\uff0c\u9009\u62e9\u5668\u8fc7\u6ee4\u670d\u52a1\n        if (service.getSelector() != null && StringUtils.isNotBlank(clientIP)) {\n            srvedIps = selectorManager.select(service.getSelector(), clientIP, srvedIps);\n        }\n\n        // \u5982\u679c\u627e\u4e0d\u5230\u670d\u52a1\u5219\u8fd4\u56de\u5f53\u524d\u670d\u52a1\n        if (CollectionUtils.isEmpty(srvedIps)) {\n        .......\n        return result;\n    }\n\n// Service#srvIPs()\npublic List<Instance> srvIPs(List<String> clusters) {\n    if (CollectionUtils.isEmpty(clusters)) {\n        clusters = new ArrayList<>();\n        clusters.addAll(clusterMap.keySet());\n    }\n    return allIPs(clusters);\n}\n\n// Service#allIPs()\npublic List<Instance> allIPs(List<String> clusters) {\n    List<Instance> result = new ArrayList<>();\n    for (String cluster : clusters) {\n        // \u670d\u52a1\u6ce8\u518c\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u5b9e\u4f8b\u4fe1\u606f\u5199\u5230clusterMap\u4e2d\uff0c\u73b0\u5728\u4ece\u5176\u4e2d\u53d6\n        Cluster clusterObj = clusterMap.get(cluster);\n        if (clusterObj == null) {\n            continue;\n        }\n\n        result.addAll(clusterObj.allIPs());\n    }\n    return result;\n}\n\n// Cluster#allIPs()\npublic List<Instance> allIPs() {\n    List<Instance> allInstances = new ArrayList<>();\n    // \u83b7\u53d6\u670d\u52a1\u4e0b\u6240\u6709\u7684\u6301\u4e45\u5316\u5b9e\u4f8b\n    allInstances.addAll(persistentInstances);\n    // \u83b7\u53d6\u670d\u52a1\u4e0b\u6240\u6709\u7684\u4e34\u65f6\u5b9e\u4f8b\n    allInstances.addAll(ephemeralInstances);\n    return allInstances;\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"2\u91c7\u7528udp\u65b9\u5f0f\u505a\u670d\u52a1\u5b9e\u4f8b\u63a8\u9001",children:"2\uff09\u91c7\u7528UDP\u65b9\u5f0f\u505a\u670d\u52a1\u5b9e\u4f8b\u63a8\u9001"}),"\n",(0,s.jsx)(n.p,{children:"NamingSubscriberServiceV1Impl#addClient()\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public void addClient(String namespaceId, String serviceName, String clusters, String agent,\n        InetSocketAddress socketAddr, DataSource dataSource, String tenant, String app) {\n\n    // \u521d\u59cb\u5316\u63a8\u9001\u5ba2\u6237\u7aef\u5b9e\u4f8bPushClient\n    PushClient client = new PushClient(namespaceId, serviceName, clusters, agent, socketAddr, dataSource, tenant,\n            app);\n    // \u6dfb\u52a0\u63a8\u9001\u76ee\u6807\u5ba2\u6237\u7aef\n    addClient(client);\n}\n\n// \u91cd\u8f7d\u65b9\u6cd5addClient()\npublic void addClient(PushClient client) {\n    // client is stored by key \'serviceName\' because notify event is driven by serviceName change\n    // \u5ba2\u6237\u7aef\u7531\u952e\u201c serviceName\u201d\u5b58\u50a8\uff0c\u56e0\u4e3a\u901a\u77e5\u4e8b\u4ef6\u7531serviceName\u66f4\u6539\u9a71\u52a8\n    String serviceKey = UtilsAndCommons.assembleFullServiceName(client.getNamespaceId(), client.getServiceName());\n    ConcurrentMap<String, PushClient> clients = clientMap.get(serviceKey);\n    // \u5982\u679c\u83b7\u53d6\u4e0d\u5230\u5ba2\u6237\u7aef\u60f3\u8c03\u7528\u7684ServiceName\u5bf9\u5e94\u7684\u63a8\u9001\u5ba2\u6237\u7aef\uff0c\u5219\u65b0\u5efa\u63a8\u9001\u5ba2\u6237\u7aef\uff0c\u5e76\u7f13\u5b58\n    if (clients == null) {\n        clientMap.putIfAbsent(serviceKey, new ConcurrentHashMap<>(1024));\n        clients = clientMap.get(serviceKey);\n    }\n\n    PushClient oldClient = clients.get(client.toString());\n    // \u5b58\u5728\u8001\u7684PushClient\uff0c\u5219\u5237\u65b0\n    if (oldClient != null) {\n        oldClient.refresh();\n    } else {\n        // \u5426\u5219\u7f13\u5b58PushClient\n        PushClient res = clients.putIfAbsent(client.toString(), client);\n        if (res != null) {\n            Loggers.PUSH.warn("client: {} already associated with key {}", res.getAddrStr(), res);\n        }\n        Loggers.PUSH.debug("client: {} added for serviceName: {}", client.getAddrStr(), client.getServiceName());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h1,{id:"\u4e94\u603b\u7ed3",children:"\u4e94\u3001\u603b\u7ed3"}),"\n",(0,s.jsx)(n.p,{children:"\u5ba2\u6237\u7aef\uff1a"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"1\u3001\u4f18\u5148\u4ece\u672c\u5730\u7f13\u5b58\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff1b\n2\u3001\u7ef4\u62a4\u5b9a\u65f6\u4efb\u52a1\u5b9a\u65f6\u4eceNacos\u670d\u52a1\u7aef\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\uff1b"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u670d\u52a1\u7aef\uff1a"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"1\u3001\u8fd4\u56de\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u4e0b\u5185\u5b58\u6ce8\u518c\u8868\u4e2d\u6240\u6709\u7684\u6c38\u4e45\u5b9e\u4f8b\u548c\u4e34\u65f6\u5b9e\u4f8b\u7ed9\u5ba2\u6237\u7aef\uff1b\n2\u3001\u5f00\u542f\u4e00\u4e2aUDP\u670d\u52a1\u5b9e\u4f8b\u4fe1\u606f\u53d8\u66f4\u63a8\u9001\u670d\u52a1\uff1b"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"\u53c2\u8003\u6587\u7ae0",children:"\u53c2\u8003\u6587\u7ae0"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://developer.aliyun.com/article/1058262",children:"https://developer.aliyun.com/article/1058262"}),"\n",(0,s.jsx)(n.a,{href:"https://ost.51cto.com/posts/14835",children:"https://ost.51cto.com/posts/14835"}),"\n",(0,s.jsx)(n.a,{href:"https://developer.aliyun.com/article/1048465",children:"https://developer.aliyun.com/article/1048465"}),"\n",(0,s.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/70478036",children:"https://zhuanlan.zhihu.com/p/70478036"}),"\n",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/6999814668390760484#heading-8",children:"https://juejin.cn/post/6999814668390760484#heading-8"})]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},88672:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>c});var s=t(50959);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);